{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KB-PC\\\\Desktop\\\\ReactApp\\\\reddit-favourites\\\\src\\\\SubredditPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubredditPosts = ({\n  subreddit\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Helper function to toggle favorite status\n  const toggleFavorite = id => {\n    const currentFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (currentFavorites.includes(id)) {\n      localStorage.setItem('favorites', JSON.stringify(currentFavorites.filter(favoriteId => favoriteId !== id)));\n    } else {\n      localStorage.setItem('favorites', JSON.stringify([...currentFavorites, id]));\n    }\n  };\n  useEffect(() => {\n    const fetchTopPosts = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`https://www.reddit.com/r/${subreddit}/hot.json?limit=10`);\n        if (!response.ok) throw new Error('Failed to fetch');\n        const data = await response.json();\n        setPosts(data.data.children.map(child => child.data));\n      } catch (error) {\n        setError('Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (subreddit) {\n      fetchTopPosts();\n    }\n  }, [subreddit]);\n\n  // Remainder of the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Top Posts in r/\", subreddit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: post.permalink,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: [post.title, \" (Score: \", post.score, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleFavorite(post.id),\n          children: JSON.parse(localStorage.getItem('favorites') || '[]').includes(post.id) ? 'Unfavorite' : 'Favorite'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SubredditPosts, \"HIJp996V7X9K3sFVr5GUNEgO/84=\");\n_c = SubredditPosts;\nexport default SubredditPosts;\nvar _c;\n$RefreshReg$(_c, \"SubredditPosts\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SubredditPosts","subreddit","_s","posts","setPosts","loading","setLoading","error","setError","toggleFavorite","id","currentFavorites","JSON","parse","localStorage","getItem","includes","setItem","stringify","filter","favoriteId","fetchTopPosts","response","fetch","ok","Error","data","json","children","map","child","fileName","_jsxFileName","lineNumber","columnNumber","post","href","permalink","target","rel","title","score","onClick","_c","$RefreshReg$"],"sources":["C:/Users/KB-PC/Desktop/ReactApp/reddit-favourites/src/SubredditPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SubredditPosts = ({ subreddit }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Helper function to toggle favorite status\r\n  const toggleFavorite = (id) => {\r\n    const currentFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    if (currentFavorites.includes(id)) {\r\n      localStorage.setItem('favorites', JSON.stringify(currentFavorites.filter(favoriteId => favoriteId !== id)));\r\n    } else {\r\n      localStorage.setItem('favorites', JSON.stringify([...currentFavorites, id]));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTopPosts = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n          const response = await fetch(`https://www.reddit.com/r/${subreddit}/hot.json?limit=10`);\r\n          if (!response.ok) throw new Error('Failed to fetch');\r\n          const data = await response.json();\r\n          setPosts(data.data.children.map(child => child.data));\r\n        } catch (error) {\r\n          setError('Failed to load data');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      \r\n\r\n    if (subreddit) {\r\n      fetchTopPosts();\r\n    }\r\n  }, [subreddit]);\r\n\r\n  // Remainder of the component\r\n  return (\r\n    <div>\r\n      <h2>Top Posts in r/{subreddit}</h2>\r\n      <ul>\r\n        {posts.map(post => (\r\n          <li key={post.id}>\r\n            <a href={post.permalink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {post.title} (Score: {post.score})\r\n            </a>\r\n            <button onClick={() => toggleFavorite(post.id)}>\r\n              {JSON.parse(localStorage.getItem('favorites') || '[]').includes(post.id) ? 'Unfavorite' : 'Favorite'}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubredditPosts;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}